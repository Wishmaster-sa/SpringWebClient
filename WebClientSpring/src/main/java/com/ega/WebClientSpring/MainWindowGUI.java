/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ega.WebClientSpring;

import com.ega.WebClientSpring.models.Answer;
import com.ega.WebClientSpring.models.AppSettings;
import com.ega.WebClientSpring.models.Persona;
import com.ega.WebClientSpring.services.ExTools;
import com.ega.WebClientSpring.services.WebClientService;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.FileNotFoundException;
import java.time.LocalDate;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import lombok.AllArgsConstructor;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.reactive.function.client.WebClient;

/**
 *
 * @author parallels
 */
@AllArgsConstructor
public class MainWindowGUI extends javax.swing.JFrame {

   //private final WebClient webClient;
   //private final WebClientService service;
   private final AppSettings appSettings;
   

    /**
     * Creates new form MainWindow
     */
    public MainWindowGUI()  {
           initComponents();
           this.appSettings = new AppSettings();
           jAddress.setText(this.appSettings.getUrl());
           /*
           WebClient webClient = WebClient.builder()
                   .baseUrl(appSettings.getUrl()) // Set the base URL for the requests
                   .defaultCookie("cookie-name", "cookie-value") // Set a default cookie for the requests
                   .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) // Set a default header for the requests
                   .build();
           this.webClient = webClient;
           
           this.service = new WebClientService(webClient);
           */
           CreatePopupMenu();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTablePopupMenu = new javax.swing.JPopupMenu();
        jAddress = new javax.swing.JTextField();
        jButtonExit = new javax.swing.JButton();
        jButtonGo = new javax.swing.JButton();
        jTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        jResult1 = new javax.swing.JTextArea();
        jButtonGetData = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jResult = new javax.swing.JTextArea();
        jButtonAddRow = new javax.swing.JButton();

        jTablePopupMenu.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jTablePopupMenuAncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jAddress.setText("http://localhost:8080/api/v1/help");
        jAddress.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jAddressFocusLost(evt);
            }
        });

        jButtonExit.setText("Exit");
        jButtonExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExitActionPerformed(evt);
            }
        });

        jButtonGo.setText("Go");
        jButtonGo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGoActionPerformed(evt);
            }
        });

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "First Name", "Last Name", "Birth Date", "Age", "RNOKPP", "Pasport", "UNZR", "is Checked", "Check Request"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, true, true, false, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable);
        if (jTable.getColumnModel().getColumnCount() > 0) {
            jTable.getColumnModel().getColumn(0).setResizable(false);
            jTable.getColumnModel().getColumn(8).setResizable(false);
        }

        jTabbedPane.addTab("Table", null, jScrollPane2, "");

        jResult1.setColumns(20);
        jResult1.setRows(5);
        jScrollPane1.setViewportView(jResult1);

        jTabbedPane.addTab("text", jScrollPane1);

        jButtonGetData.setText("Get Data");
        jButtonGetData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonGetDataActionPerformed(evt);
            }
        });

        jResult.setColumns(20);
        jResult.setRows(5);
        jScrollPane3.setViewportView(jResult);

        jButtonAddRow.setText("New Row");
        jButtonAddRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddRowActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonGetData)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonAddRow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonExit))
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 580, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonGo, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 185, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonGo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonGetData)
                    .addComponent(jButtonExit)
                    .addComponent(jButtonAddRow))
                .addContainerGap())
        );

        jTabbedPane.getAccessibleContext().setAccessibleName("text");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
// <editor-fold defaultstate="collapsed" desc="КОНТЕКСТНЕ МЕНЮ">                          
    private void AddNewRowInTable(){
        JSONObject jsData = new JSONObject();
        jsData = Persona.builder().rnokpp("").build().toJSON();

        AddIntoTable(jsData);
    }

    private void UpdatePersonInDatabase(){
        DefaultTableModel tblModel =  (DefaultTableModel) jTable.getModel();

        int selectedRow = jTable.getSelectedRow();
        if((selectedRow == -1)&&(tblModel.getRowCount()==1)){
            selectedRow = 0;
        }
        String id           = tblModel.getValueAt(selectedRow,0).toString();
        String firstName    = tblModel.getValueAt(selectedRow,1).toString();
        String lastName     = tblModel.getValueAt(selectedRow,2).toString();
        LocalDate birthDate    = getDateFromString(tblModel.getValueAt(selectedRow,3).toString());
        String rnokpp       = tblModel.getValueAt(selectedRow,5).toString();
        String pasport      = tblModel.getValueAt(selectedRow,6).toString();
        String unzr         = tblModel.getValueAt(selectedRow,7).toString();

        
        Persona persona = Persona.builder()
                .id(Long.parseLong(id))
                .firstName(firstName)
                .lastName (lastName)
                .birthDate(birthDate)
                .rnokpp   (rnokpp)
                .pasport  (pasport)
                .unzr     (unzr)
                .build();
        if(rnokpp.isEmpty()){
            SendMessageBox("Requid field RNOKPP is empty!",true);
            return;
        }
        WebClientService service = getWebClientService();
        Answer ans = service.savePersona(persona);
        jResult.append(ans.toString()+"\n");
        
        if(ans.getStatus()==true){
            SendMessageBox("Persona "+firstName+" "+lastName +" is updated in database!",false);
        }else{
            SendMessageBox(""+ans.getDescr(),true);
        }
    }

    private void DeletePersonFromDataBase(){
        DefaultTableModel tblModel =  (DefaultTableModel) jTable.getModel();
        String firstName    = tblModel.getValueAt(jTable.getSelectedRow(),1).toString();
        String lastName     = tblModel.getValueAt(jTable.getSelectedRow(),2).toString();
        String rnokpp       = tblModel.getValueAt(jTable.getSelectedRow(),5).toString();

        if(!rnokpp.isEmpty()){
            WebClientService service = getWebClientService();
            Answer ans = service.deletePersona(rnokpp);
            jResult.append(ans.toString()+"\n");
            
            if(ans.getStatus()==true){
                tblModel.removeRow(jTable.getSelectedRow());
                SendMessageBox("Persona "+firstName+" "+lastName+" was DELETED from database!",false);
            }else{
                SendMessageBox("Error: "+ans.getDescr(),true);

            }
        }else{
                tblModel.removeRow(jTable.getSelectedRow());
        }
    }   

    private void CheckPersona(){
        DefaultTableModel tblModel =  (DefaultTableModel) jTable.getModel();
        String rnokpp       = tblModel.getValueAt(jTable.getSelectedRow(),5).toString();

        if(!rnokpp.isEmpty()){
            WebClientService service = getWebClientService();
            Answer ans = service.checkPersona(rnokpp);
            
            if(ans.getStatus()==true){
                tblModel.removeRow(jTable.getSelectedRow());
                SendMessageBox("Request status: "+ans.getResult(),false);
            }else{
                SendMessageBox("Error: "+ans.getDescr(),true);

            }
            jResult.append(ans.toString()+"\n");
        }
    }   
    
    private void CreatePopupMenu(){
        JMenuItem addItem = new JMenuItem("Add");
        addItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                AddNewRowInTable();
            }
        });
        jTablePopupMenu.add(addItem);
        jTable.setComponentPopupMenu(jTablePopupMenu);
        
        //-------------------------------------------------------------------
        JMenuItem updateItem = new JMenuItem("Update row in DB");
        updateItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                UpdatePersonInDatabase();
            }
        });
        jTablePopupMenu.add(updateItem);
        jTable.setComponentPopupMenu(jTablePopupMenu);

        //-------------------------------------------------------------------
        JMenuItem checkItem = new JMenuItem("Check persona");
        checkItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                CheckPersona();
            }
        });
        jTablePopupMenu.add(checkItem);
        jTable.setComponentPopupMenu(jTablePopupMenu);

        //-------------------------------------------------------------------
        JMenuItem deleteItem = new JMenuItem("Delete");
        deleteItem.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                DeletePersonFromDataBase();                
            }
        });
        jTablePopupMenu.add(deleteItem);
        jTable.setComponentPopupMenu(jTablePopupMenu);

        
    }
//</editor-fold>

    
// <editor-fold defaultstate="collapsed" desc="ІНТЕРФЕЙСНІ ФУНКЦІЇ">                          
   
    private void jButtonExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jButtonExitActionPerformed

    private void jButtonGoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGoActionPerformed
        
        WebClientService service = getWebClientService();
        Answer ans = service.getRequest(jAddress.getText());
        if(ans.getStatus()==false){
            SendMessageBox("Error: "+ans.getDescr(),true);
            return;
        }
        //jResult.removeAll();
        String ret = ans.getResult();
        jResult.append(ans.toString()+"\n");
        
        
    }//GEN-LAST:event_jButtonGoActionPerformed

    private void jTablePopupMenuAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jTablePopupMenuAncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jTablePopupMenuAncestorAdded

    private void jAddressFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jAddressFocusLost
        this.appSettings.setUrl(jAddress.getText());
    }//GEN-LAST:event_jAddressFocusLost

    private void jButtonGetDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetDataActionPerformed
        DefaultTableModel tblModel =  (DefaultTableModel) jTable.getModel();
        tblModel.setNumRows(0);
        
        WebClientService service = getWebClientService();
        Answer ans = service.showAll();
        if(ans.getStatus()==false){
            SendMessageBox("Error: "+ans.getDescr(),true);
            return;
        }
        //jResult.removeAll();
        String ret = ans.getResult();
        jResult.append(ans.toString()+"\n");
        JSONArray jsArray = new JSONArray(ret);
        for( int i = 0;i<jsArray.length();i++){
            JSONObject bodyJSON = jsArray.getJSONObject(i);
            AddIntoTable(bodyJSON);
        }
    }//GEN-LAST:event_jButtonGetDataActionPerformed

    private void jButtonAddRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddRowActionPerformed
        AddNewRowInTable();
    }//GEN-LAST:event_jButtonAddRowActionPerformed
//</editor-fold>

    
// <editor-fold defaultstate="collapsed" desc="ДОПОМОЖНІ ФУНКЦІЇ">                          
    private WebClientService getWebClientService(){
           WebClient webClient = WebClient.builder()
                   .baseUrl(appSettings.getUrl()) // Set the base URL for the requests
                   .defaultCookie("cookie-name", "cookie-value") // Set a default cookie for the requests
                   .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE) // Set a default header for the requests
                   .build();
           
           
           return  new WebClientService(webClient);
        
    }
        
    private void AddIntoTable(JSONObject bodyJSON){
        Object rowData[] = { //bodyJSON.toString()
            
            bodyJSON.getInt("id"),
            bodyJSON.getString("firstName"),
            bodyJSON.getString("lastName"),
            bodyJSON.get("birthDate"),
            bodyJSON.getInt("age"),
            bodyJSON.getString("rnokpp"),
            bodyJSON.getString("pasport"),
            bodyJSON.getString("unzr"),
            bodyJSON.getBoolean("isChecked"),
            ""+(bodyJSON.has("CheckedRequest") ? bodyJSON.get("CheckedRequest"):"")
            
        }; 
        DefaultTableModel tblModel = (DefaultTableModel)jTable.getModel();
        tblModel.addRow(rowData);
    }
            
    private void SendMessageBox(String message, boolean isError){
        JOptionPane.showMessageDialog(MainWindowGUI.this, message,
            isError? "Помилка":"", isError? JOptionPane.ERROR_MESSAGE:JOptionPane.INFORMATION_MESSAGE);   
    }
    
    public LocalDate getDateFromString(String date){
        LocalDate ret = LocalDate.ofYearDay(0, 1);
        if(date.isEmpty()){
            return ret;
        }else
        {
            try{
                ret = LocalDate.parse(date);
            }catch (Exception ex){
                SendMessageBox("Failed to convert String to Date!/n"+date+" is not acceptable string.\nMust be in YYYY-MM-DD format!\n",true);
            }
        }
        
        return ret;
    }
//</editor-fold>

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindowGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindowGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField jAddress;
    private javax.swing.JButton jButtonAddRow;
    private javax.swing.JButton jButtonExit;
    private javax.swing.JButton jButtonGetData;
    private javax.swing.JButton jButtonGo;
    private javax.swing.JTextArea jResult;
    private javax.swing.JTextArea jResult1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTable;
    private javax.swing.JPopupMenu jTablePopupMenu;
    // End of variables declaration//GEN-END:variables
}
